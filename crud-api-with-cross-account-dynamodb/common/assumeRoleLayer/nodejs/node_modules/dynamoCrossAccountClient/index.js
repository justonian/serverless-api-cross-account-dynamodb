const AWS = require('aws-sdk');

var dynamodb = new AWS.DynamoDB();

// Create the STS service object
var sts = new AWS.STS({apiVersion: '2011-06-15'});

// Create last IAM role object to locally cache credentials
let lastIamRoleCreds = {assumeRoleCount: 0};

async function setCreds(context) {
  // Only assume a different IAM role if a role is defined as an environmental parameter
  if (!process.env.ROLE_ARN) return;
  var assumeRoleParams = {
    RoleArn: process.env.ROLE_ARN,
    RoleSessionName: context.functionName,
    DurationSeconds: 900
  };
  if (lastIamRoleCreds.data) {
    // Only assume new role if existing role is expired or within a defined buffer interval
    let expiration = new Date(lastIamRoleCreds.data.Credentials.Expiration);
    let now = new Date();
    let epsilonSeconds = 5;
    if (expiration.getTime() - now.getTime() >= 1000 * epsilonSeconds) return;
  }
  
  // Assume role using defined parameters
  console.log('assumeRoleParams', assumeRoleParams);
  let data = await sts.assumeRole(assumeRoleParams).promise();
  console.log('assumeRoleResponse', data);
  let roleCreds = {accessKeyId: data.Credentials.AccessKeyId,
              secretAccessKey: data.Credentials.SecretAccessKey,
              sessionToken: data.Credentials.SessionToken};
  lastIamRoleCreds.data = data;
  lastIamRoleCreds.assumeRoleCount++;
  console.log('assumeRoleCount', lastIamRoleCreds.assumeRoleCount);

  // Initialize DynamoDB client with new IAM role context
  dynamodb.config.update({
    accessKeyId: roleCreds.accessKeyId,
    secretAccessKey: roleCreds.secretAccessKey,
    sessionToken: roleCreds.sessionToken
  });   
}

async function getDynamoClient(context) {
  await setCreds(context);
  return dynamodb;
}

module.exports = {
  getDynamoClient,
  lastIamRoleCreds,
}
